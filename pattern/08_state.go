package pattern

import "fmt"

/*
	Реализовать паттерн «состояние».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/State_pattern

Состояние — это поведенческий паттерн проектирования, который позволяет объектам менять поведение в зависимости от своего состояния.
Извне создаётся впечатление, что изменился класс объекта.

Паттерн должен применяться:
когда поведение объекта зависит от его состояния
поведение объекта должно изменяться во время выполнения программы
состояний достаточно много и использовать для этого условные операторы, разбросанные по коду, достаточно затруднительно

Плюсы:
Избавляет от множества больших условных операторов машины состояний.
Концентрирует в одном месте код, связанный с определённым состоянием.
Упрощает код контекста.

Минуcы:
Может неоправданно усложнить код, если состояний мало и они редко меняются.

Интерфейс состояния: Описывает метод, который каждый конкретный класс состояния должен реализовать.
Конкретные состояния: Для каждого состояния реализуем логику, соответствующую действиям для этого состояния.
Контекст: Заказ, который управляет состоянием и делегирует выполнение действий конкретному состоянию.
*/

/*
Заказ может находиться в нескольких состояниях:

Новый: Заказ только что создан, и его необходимо обработать.
Обрабатывается: Заказ в процессе обработки.
Доставлен: Заказ был успешно доставлен.
Отменен: Заказ был отменен.
*/

// Интерфейс состояния
type State interface {
	Handle(order *Order)
}

// Контекст заказа
type Order struct {
	state State
}

// Установка состояния
func (o *Order) SetState(state State) {
	o.state = state
}

// Действие состояния
func (o *Order) Handle() {
	o.state.Handle(o)
}

// Конкретные состояния
type NewOrderState struct{}

func (n *NewOrderState) Handle(order *Order) {
	order.SetState(&ProcessingOrderState{})
	fmt.Println("Новый заказ")
}

type ProcessingOrderState struct{}

func (p *ProcessingOrderState) Handle(order *Order) {
	order.SetState(&DeliveredOrderState{})
	fmt.Println("Заказ в обработке")
}

type DeliveredOrderState struct{}

func (d *DeliveredOrderState) Handle(order *Order) {
	fmt.Println("Заказ доставлен")
}
